struct Rect
  num left
  num top
  num right
  num bottom
end

func main()
  num x = MIDX
  num y = MIDY
  num scale = 10
  num batx1 = 0.04 * SCREENW
  num batx2 = 0.96 * SCREENW
  num baty1 = 0.05 * SCREENH
  num baty2 = 0.95 * SCREENH
  num batSize = 100
  num batThick = 10 
  num ballThick = 15
  num wallThick = SCREENH * 0.2
 
  num ballx = MIDX * 0.6
  num bally = MIDY
  num vx = -5
  num vy = 1
  num speed = 5

  num halfThick = batThick / 2 
  num halfBat = batSize / 2
  num halfBall = ballThick / 2

  num[] blocks
  num blockWidth = 10
  num blockInner = 4
  num blockSpacing = MIDX / 20
  num blockSize = MIDX / 25
  num blockTop = (SCREENH - blockSpacing * blockWidth) / 2
  num blockLeft = (SCREENW - blockSpacing * blockWidth) / 2
  for by to blockWidth
    for bx to blockWidth
      num col = 0
      if by < blockInner or by >= blockWidth - blockInner or bx < blockInner or bx >= blockWidth - blockInner
        col = col(255, rnd(256), rnd(256), rnd(256))
      end
      add blocks, col
    end
  end
  loadsound 0, currdir() + '/kicksp2.wav'
  loadsound 1, currdir() + '/Synth849.wav'
  console false
end

func draw()
  style FILL  
  batMove()
  ballMove()
  drawBats()
  drawBall()
  drawBlocks()
end

func batMove()
  num rx = axis('AXIS_X')
  num ry = axis('AXIS_Y')
  if abs(rx) > 0.01
    x += rx * scale
  end
  if abs(ry) > 0.01
    y += ry * scale
  end
  if x < halfBat
    x = halfBat
  else if x > SCREENW - halfBat
    x = SCREENW - halfBat
  else if y < halfBat
    y = halfBat
  else if y > SCREENH - halfBat
    y = SCREENH - halfBat
  end
end


func bool overlap(Rect a, Rect b)
  if a.top > b.bottom
    return false
  else if a.bottom < b.top
    return false
  else if a.left > b.right
    return false
  else if a.right < b.left
    return false
  end
  return true
end

func str bounceDirection(Rect block, num x, num y, num vx, num vy)
  str dir = ""
  if (vx > 0 and x < block.left) or (vx < 0 and x > block.right)
    dir = "x"
  end
  if (vy > 0 and y < block.top) or (vy < 0 and y > block.bottom)
    dir = dir + "y"
  end
  return dir
end

func ballMove()
  num prevx = ballx
  num prevy = bally

  ballx += vx
  bally += vy
  Rect ball = { left = ballx - halfBall, top = bally - halfBall, right = ballx + halfBall, bottom = bally + halfBall}
  Rect leftBat = { left = batx1 + halfThick, top = y - halfBat, right = batx1 + halfThick, bottom = y + halfBat}
  Rect rightBat = { left = batx2 - halfThick, top = y - halfBat, right = batx2 - halfThick, bottom = y + halfBat}
  Rect topBat = { left = x - halfBat, top = baty1 + halfThick, right = x + halfBat , bottom = baty1 + halfThick}
  Rect bottomBat = { left = x - halfBat, top = baty2 - halfThick, right = x + halfBat, bottom = baty2 - halfThick}
  Rect screen = { left = 0, top = 0, right = SCREENW, bottom = SCREENH}

  bool overLeft = overlap(ball, leftBat)
  bool overRight = overlap(ball, rightBat)
  bool overTop = overlap(ball, topBat)
  bool overBottom = overlap(ball, bottomBat)

  // ball to bat hit check
  if not overlap(ball, screen)
    lostBall()
  else if overLeft or overRight
    vx = -vx
    vy += (bally - y) * 0.1
    vx = sqr(speed * speed - vy * vy) * sgn(vy)
    ballx += vx
    playsound 0
  else if overTop or overBottom
    vy = -vy
    vx += (ballx - x) * 0.1
    vy = sqr(speed * speed - vx * vx) * sgn(vx)
    bally += vy
    playsound 0
  end

  // ball to block hit check
  num ballCellx = int((ballx - blockLeft) / blockSpacing)
  num ballCelly = int((bally - blockTop) / blockSpacing)
  if ballCellx >= -1 and ballCellx <= blockWidth and ballCelly >= -1 and ballCelly <= blockWidth // only interested if close to blocks
    for bcx from -1 to 1               // look at the 3 x 3 cells around ball cell
       num xp = ballCellx + bcx
       if xp >= 0 and xp < blockWidth  
       for bcy from -1 to 1
         num yp = ballCelly + bcy
         if yp >= 0 and yp < blockWidth
            num bi = yp * blockWidth + xp // pointer to the current cell
            num col = blocks[bi]
            if col != 0
              num leftx = blockLeft + xp * blockSpacing
              num topy = blockTop + yp * blockSpacing
              Rect block = { left = leftx, top = topy, right = leftx + blockSize, bottom = topy + blockSize }
              if overlap(ball, block)
                blocks[bi] = 0
                playsound 1
                str dir = bounceDirection(block, prevx, prevy, vx, vy)
                if dir == "y" or dir == "xy" 
                  vy = -vy
                  bally += vy
                end
                if dir == "x" or dir == "xy"
                  vx = -vx
                  ballx += vx
                end
              end
            end
          end
        end
      end
    end
  end         
end

func lostBall()
  ballx = MIDX * 0.6
  bally = MIDY 
  vx = -5
  vy = 1
end

func drawBats()
  style WHITE
  rrect x - halfBat, baty1 - halfThick, x + halfBat, baty1 + halfThick, 3, 3
  rrect x - halfBat, baty2 - halfThick, x + halfBat, baty2 + halfThick, 3, 3
  rrect batx1 - halfThick, y - halfBat, batx1 + halfThick, y + halfBat, 3, 3
  rrect batx2 - halfThick, y - halfBat, batx2 + halfThick, y + halfBat, 3, 3
end

func drawBall()
  style PINK
  circle ballx, bally, halfBall
end

func drawBlocks()
  for by to blockWidth
    for bx to blockWidth
      num col = blocks[by * blockWidth + bx]
      if col != 0
        paint col
        num leftx = blockLeft + bx * blockSpacing
        num topy = blockTop + by * blockSpacing
        rrect leftx, topy, leftx + blockSize, topy + blockSize, 3, 3
      end
    end
  end
end

